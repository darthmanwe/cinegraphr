<?xml version='1.0'?>
<signatures version='1.0'>
<struct type='{GPUByteColorVector=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;alpha&quot;C}' name='GPUByteColorVector'>
<field type='C' name='red' declared_type='GLubyte'/>
<field type='C' name='green' declared_type='GLubyte'/>
<field type='C' name='blue' declared_type='GLubyte'/>
<field type='C' name='alpha' declared_type='GLubyte'/>
</struct>
<struct type='{GPUMatrix3x3=&quot;one&quot;{GPUVector3=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f}&quot;two&quot;{GPUVector3=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f}&quot;three&quot;{GPUVector3=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f}}' name='GPUMatrix3x3'>
<field type='{GPUVector3=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f}' name='one' declared_type='GPUVector3'/>
<field type='{GPUVector3=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f}' name='two' declared_type='GPUVector3'/>
<field type='{GPUVector3=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f}' name='three' declared_type='GPUVector3'/>
</struct>
<struct type='{GPUMatrix4x4=&quot;one&quot;{GPUVector4=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f&quot;four&quot;f}&quot;two&quot;{GPUVector4=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f&quot;four&quot;f}&quot;three&quot;{GPUVector4=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f&quot;four&quot;f}&quot;four&quot;{GPUVector4=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f&quot;four&quot;f}}' name='GPUMatrix4x4'>
<field type='{GPUVector4=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f&quot;four&quot;f}' name='one' declared_type='GPUVector4'/>
<field type='{GPUVector4=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f&quot;four&quot;f}' name='two' declared_type='GPUVector4'/>
<field type='{GPUVector4=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f&quot;four&quot;f}' name='three' declared_type='GPUVector4'/>
<field type='{GPUVector4=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f&quot;four&quot;f}' name='four' declared_type='GPUVector4'/>
</struct>
<struct type='{GPUVector3=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f}' name='GPUVector3'>
<field type='f' name='one' declared_type='GLfloat'/>
<field type='f' name='two' declared_type='GLfloat'/>
<field type='f' name='three' declared_type='GLfloat'/>
</struct>
<struct type='{GPUVector4=&quot;one&quot;f&quot;two&quot;f&quot;three&quot;f&quot;four&quot;f}' name='GPUVector4'>
<field type='f' name='one' declared_type='GLfloat'/>
<field type='f' name='two' declared_type='GLfloat'/>
<field type='f' name='three' declared_type='GLfloat'/>
<field type='f' name='four' declared_type='GLfloat'/>
</struct>
<constant const='true' type='@' name='kGPUImageLuminanceFragmentShaderString' declared_type='NSString*'/>
<constant const='true' type='@' name='kGPUImageNearbyTexelSamplingVertexShaderString' declared_type='NSString*'/>
<constant const='true' type='@' name='kGPUImagePassthroughFragmentShaderString' declared_type='NSString*'/>
<constant const='true' type='@' name='kGPUImageVertexShaderString' declared_type='NSString*'/>
<enum value='1' name='kGPUImageFillModePreserveAspectRatio'/>
<enum value='2' name='kGPUImageFillModePreserveAspectRatioAndFill'/>
<enum value='0' name='kGPUImageFillModeStretch'/>
<enum value='3' name='kGPUImageFlipHorizonal'/>
<enum value='2' name='kGPUImageFlipVertical'/>
<enum value='2' name='kGPUImageHistogramBlue'/>
<enum value='1' name='kGPUImageHistogramGreen'/>
<enum value='4' name='kGPUImageHistogramLuminance'/>
<enum value='3' name='kGPUImageHistogramRGB'/>
<enum value='0' name='kGPUImageHistogramRed'/>
<enum value='0' name='kGPUImageRotateLeft'/>
<enum value='1' name='kGPUImageRotateRight'/>
<enum value='4' name='kGPUImageRotateRightFlipVertical'/>
<function name='report_memory'>
<arg type='@' name='tag' declared_type='NSString*'/>
<retval type='v' declared_type='void'/>
</function>
<function name='runOnMainQueueWithoutDeadlocking'>
<arg type='@?' name='block' declared_type='void (^)(void)' function_pointer='true'>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</function>
<class name='GLProgram'>
<method selector='addAttribute:'>
<arg index='0' type='@' name='attributeName' declared_type='NSString*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='attributeIndex:'>
<arg index='0' type='@' name='attributeName' declared_type='NSString*'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='fragmentShaderLog'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='initWithVertexShaderFilename:fragmentShaderFilename:'>
<arg index='0' type='@' name='vShaderFilename' declared_type='NSString*'/>
<arg index='1' type='@' name='fShaderFilename' declared_type='NSString*'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithVertexShaderString:fragmentShaderFilename:'>
<arg index='0' type='@' name='vShaderString' declared_type='NSString*'/>
<arg index='1' type='@' name='fShaderFilename' declared_type='NSString*'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithVertexShaderString:fragmentShaderString:'>
<arg index='0' type='@' name='vShaderString' declared_type='NSString*'/>
<arg index='1' type='@' name='fShaderString' declared_type='NSString*'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='link'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='programLog'>
<retval type='@' declared_type='NSString*'/>
</method>
<method selector='uniformIndex:'>
<arg index='0' type='@' name='uniformName' declared_type='NSString*'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='use'>
<retval type='v' declared_type='void'/>
</method>
<method selector='validate'>
<retval type='v' declared_type='void'/>
</method>
<method selector='vertexShaderLog'>
<retval type='@' declared_type='NSString*'/>
</method>
</class>
<class name='GPUImage3x3ConvolutionFilter'>
<method selector='convolutionKernel'>
<retval type='{GPUMatrix3x3={GPUVector3=fff}{GPUVector3=fff}{GPUVector3=fff}}' declared_type='GPUMatrix3x3'/>
</method>
<method selector='setConvolutionKernel:'>
<arg index='0' type='{GPUMatrix3x3={GPUVector3=fff}{GPUVector3=fff}{GPUVector3=fff}}' name='convolutionKernel' declared_type='GPUMatrix3x3'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageAlphaBlendFilter'>
<method selector='mix'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setMix:'>
<arg index='0' type='f' name='mix' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageBrightnessFilter'>
<method selector='brightness'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setBrightness:'>
<arg index='0' type='f' name='brightness' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageBulgeDistortionFilter'>
<method selector='center'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='radius'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='scale'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setCenter:'>
<arg index='0' type='{CGPoint=ff}' name='center' declared_type='CGPoint'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setRadius:'>
<arg index='0' type='f' name='radius' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setScale:'>
<arg index='0' type='f' name='scale' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageCannyEdgeDetectionFilter'>
<method selector='blurSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='imageHeightFactor'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='imageWidthFactor'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setBlurSize:'>
<arg index='0' type='f' name='blurSize' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageHeightFactor:'>
<arg index='0' type='f' name='imageHeightFactor' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWidthFactor:'>
<arg index='0' type='f' name='imageWidthFactor' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setThreshold:'>
<arg index='0' type='f' name='threshold' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='threshold'>
<retval type='f' declared_type='CGFloat'/>
</method>
</class>
<class name='GPUImageChromaKeyBlendFilter'>
<method selector='setColorToReplaceRed:green:blue:'>
<arg index='0' type='f' name='redComponent' declared_type='GLfloat'/>
<arg index='1' type='f' name='greenComponent' declared_type='GLfloat'/>
<arg index='2' type='f' name='blueComponent' declared_type='GLfloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSmoothing:'>
<arg index='0' type='f' name='smoothing' declared_type='GLfloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setThresholdSensitivity:'>
<arg index='0' type='f' name='thresholdSensitivity' declared_type='GLfloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='smoothing'>
<retval type='f' declared_type='GLfloat'/>
</method>
<method selector='thresholdSensitivity'>
<retval type='f' declared_type='GLfloat'/>
</method>
</class>
<class name='GPUImageColorMatrixFilter'>
<method selector='colorMatrix'>
<retval type='{GPUMatrix4x4={GPUVector4=ffff}{GPUVector4=ffff}{GPUVector4=ffff}{GPUVector4=ffff}}' declared_type='GPUMatrix4x4'/>
</method>
<method selector='intensity'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setColorMatrix:'>
<arg index='0' type='{GPUMatrix4x4={GPUVector4=ffff}{GPUVector4=ffff}{GPUVector4=ffff}{GPUVector4=ffff}}' name='colorMatrix' declared_type='GPUMatrix4x4'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setIntensity:'>
<arg index='0' type='f' name='intensity' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageContrastFilter'>
<method selector='contrast'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setContrast:'>
<arg index='0' type='f' name='contrast' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageCropFilter'>
<method selector='cropRegion'>
<retval type='{CGRect={CGPoint=ff}{CGSize=ff}}' declared_type='CGRect'/>
</method>
<method selector='initWithCropRegion:'>
<arg index='0' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='newCropRegion' declared_type='CGRect'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setCropRegion:'>
<arg index='0' type='{CGRect={CGPoint=ff}{CGSize=ff}}' name='cropRegion' declared_type='CGRect'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageDissolveBlendFilter'>
<method selector='mix'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setMix:'>
<arg index='0' type='f' name='mix' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageEmbossFilter'>
<method selector='intensity'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setIntensity:'>
<arg index='0' type='f' name='intensity' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageExposureFilter'>
<method selector='exposure'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setExposure:'>
<arg index='0' type='f' name='exposure' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageFastBlurFilter'>
<method selector='blurPasses'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='blurSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setBlurPasses:'>
<arg index='0' type='I' name='blurPasses' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBlurSize:'>
<arg index='0' type='f' name='blurSize' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageFilter'>
<method selector='createFilterFBOofSize:'>
<arg index='0' type='{CGSize=ff}' name='currentFBOSize' declared_type='CGSize'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='destroyFilterFBO'>
<retval type='v' declared_type='void'/>
</method>
<method selector='informTargetsAboutNewFrameAtTime:'>
<arg index='0' type='{_CMTime=qiIq}' name='frameTime' declared_type='CMTime'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='initWithFragmentShaderFromFile:'>
<arg index='0' type='@' name='fragmentShaderFilename' declared_type='NSString*'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithFragmentShaderFromString:'>
<arg index='0' type='@' name='fragmentShaderString' declared_type='NSString*'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithVertexShaderFromString:fragmentShaderFromString:'>
<arg index='0' type='@' name='vertexShaderString' declared_type='NSString*'/>
<arg index='1' type='@' name='fragmentShaderString' declared_type='NSString*'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initializeAttributes'>
<retval type='v' declared_type='void'/>
</method>
<method selector='outputFrameSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='preventRendering'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='recreateFilterFBO'>
<retval type='v' declared_type='void'/>
</method>
<method selector='renderTarget'>
<retval type='^{__CVBuffer=}' declared_type='CVPixelBufferRef'/>
</method>
<method selector='renderToTextureWithVertices:textureCoordinates:sourceTexture:'>
<arg index='0' const='true' type='^f' name='vertices' declared_type='GLfloat*'/>
<arg index='1' const='true' type='^f' name='textureCoordinates' declared_type='GLfloat*'/>
<arg index='2' type='I' name='sourceTexture' declared_type='GLuint'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBackgroundColorRed:green:blue:alpha:'>
<arg index='0' type='f' name='redComponent' declared_type='GLfloat'/>
<arg index='1' type='f' name='greenComponent' declared_type='GLfloat'/>
<arg index='2' type='f' name='blueComponent' declared_type='GLfloat'/>
<arg index='3' type='f' name='alphaComponent' declared_type='GLfloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFilterFBO'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFloat:forUniform:'>
<arg index='0' type='f' name='newFloat' declared_type='GLfloat'/>
<arg index='1' type='@' name='uniformName' declared_type='NSString*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFloatArray:length:forUniform:'>
<arg index='0' type='^f' name='array' declared_type='GLfloat*'/>
<arg index='1' type='i' name='count' declared_type='GLsizei'/>
<arg index='2' type='@' name='uniformName' declared_type='NSString*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFloatVec3:forUniform:'>
<arg index='0' type='^f' name='newVec3' declared_type='GLfloat*'/>
<arg index='1' type='@' name='uniformName' declared_type='NSString*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFloatVec4:forUniform:'>
<arg index='0' type='^f' name='newVec4' declared_type='GLfloat*'/>
<arg index='1' type='@' name='uniformName' declared_type='NSString*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setInteger:forUniform:'>
<arg index='0' type='i' name='newInteger' declared_type='GLint'/>
<arg index='1' type='@' name='uniformName' declared_type='NSString*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOutputFBO'>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPoint:forUniform:'>
<arg index='0' type='{CGPoint=ff}' name='newPoint' declared_type='CGPoint'/>
<arg index='1' type='@' name='uniformName' declared_type='NSString*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPreventRendering:'>
<arg index='0' type='B' name='preventRendering' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSize:forUniform:'>
<arg index='0' type='{CGSize=ff}' name='newSize' declared_type='CGSize'/>
<arg index='1' type='@' name='uniformName' declared_type='NSString*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setupFilterForSize:'>
<arg index='0' type='{CGSize=ff}' name='filterFrameSize' declared_type='CGSize'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sizeOfFBO'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
</class>
<class name='GPUImageFilterGroup'>
<method selector='addFilter:'>
<arg index='0' type='@' name='newFilter' declared_type='GPUImageOutput*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='filterAtIndex:'>
<arg index='0' type='I' name='filterIndex' declared_type='NSUInteger'/>
<retval type='@' declared_type='GPUImageOutput*'/>
</method>
<method selector='initialFilters'>
<retval type='@' declared_type='NSArray*'/>
</method>
<method selector='setInitialFilters:'>
<arg index='0' type='@' name='initialFilters' declared_type='NSArray*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTerminalFilter:'>
<arg index='0' type='@' name='terminalFilter' declared_type='GPUImageOutput*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='terminalFilter'>
<retval type='@' declared_type='GPUImageOutput*'/>
</method>
</class>
<class name='GPUImageFilterPipeline'>
<method selector='addFilter:'>
<arg index='0' type='@' name='filter' declared_type='GPUImageFilter*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addFilter:atIndex:'>
<arg index='0' type='@' name='filter' declared_type='GPUImageFilter*'/>
<arg index='1' type='I' name='insertIndex' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='currentFilteredFrame'>
<retval type='@' declared_type='id'/>
</method>
<method selector='filters'>
<retval type='@' declared_type='NSMutableArray*'/>
</method>
<method selector='initWithConfiguration:input:output:'>
<arg index='0' type='@' name='configuration' declared_type='NSDictionary*'/>
<arg index='1' type='@' name='input' declared_type='GPUImageOutput*'/>
<arg index='2' type='@' name='output' declared_type='id'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithConfigurationFile:input:output:'>
<arg index='0' type='@' name='configuration' declared_type='NSURL*'/>
<arg index='1' type='@' name='input' declared_type='GPUImageOutput*'/>
<arg index='2' type='@' name='output' declared_type='id'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithOrderedFilters:input:output:'>
<arg index='0' type='@' name='filters' declared_type='NSArray*'/>
<arg index='1' type='@' name='input' declared_type='GPUImageOutput*'/>
<arg index='2' type='@' name='output' declared_type='id'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='input'>
<retval type='@' declared_type='GPUImageOutput*'/>
</method>
<method selector='output'>
<retval type='@' declared_type='id'/>
</method>
<method selector='removeAllFilters'>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeFilterAtIndex:'>
<arg index='0' type='I' name='index' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='replaceAllFilters:'>
<arg index='0' type='@' name='newFilters' declared_type='NSArray*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='replaceFilterAtIndex:withFilter:'>
<arg index='0' type='I' name='index' declared_type='NSUInteger'/>
<arg index='1' type='@' name='filter' declared_type='GPUImageFilter*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFilters:'>
<arg index='0' type='@' name='filters' declared_type='NSMutableArray*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setInput:'>
<arg index='0' type='@' name='input' declared_type='GPUImageOutput*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setOutput:'>
<arg index='0' type='@' name='output' declared_type='id'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageGammaFilter'>
<method selector='gamma'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setGamma:'>
<arg index='0' type='f' name='gamma' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageGaussianBlurFilter'>
<method selector='blurSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setBlurSize:'>
<arg index='0' type='f' name='blurSize' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setGaussianValues'>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageGaussianSelectiveBlurFilter'>
<method selector='excludeBlurSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='excludeCirclePoint'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='excludeCircleRadius'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setExcludeBlurSize:'>
<arg index='0' type='f' name='excludeBlurSize' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setExcludeCirclePoint:'>
<arg index='0' type='{CGPoint=ff}' name='excludeCirclePoint' declared_type='CGPoint'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setExcludeCircleRadius:'>
<arg index='0' type='f' name='excludeCircleRadius' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageHarrisCornerDetectionFilter'>
<method selector='blurSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setBlurSize:'>
<arg index='0' type='f' name='blurSize' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageHazeFilter'>
<method selector='distance'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setDistance:'>
<arg index='0' type='f' name='distance' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setSlope:'>
<arg index='0' type='f' name='slope' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='slope'>
<retval type='f' declared_type='CGFloat'/>
</method>
</class>
<class name='GPUImageHistogramFilter'>
<method selector='downsamplingFactor'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='generatePointCoordinates'>
<retval type='v' declared_type='void'/>
</method>
<method selector='initWithHistogramType:'>
<arg index='0' type='i' name='newHistogramType' declared_type='GPUImageHistogramType'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='setDownsamplingFactor:'>
<arg index='0' type='I' name='downsamplingFactor' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageKuwaharaFilter'>
<method selector='radius'>
<retval type='I' declared_type='GLuint'/>
</method>
<method selector='setRadius:'>
<arg index='0' type='I' name='radius' declared_type='GLuint'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageLuminanceThresholdFilter'>
<method selector='setThreshold:'>
<arg index='0' type='f' name='threshold' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='threshold'>
<retval type='f' declared_type='CGFloat'/>
</method>
</class>
<class name='GPUImageMovie'>
<method selector='asset'>
<retval type='@' declared_type='AVAsset*'/>
</method>
<method selector='enableSynchronizedEncodingUsingMovieWriter:'>
<arg index='0' type='@' name='movieWriter' declared_type='GPUImageMovieWriter*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='endProcessing'>
<retval type='v' declared_type='void'/>
</method>
<method selector='initWithAsset:'>
<arg index='0' type='@' name='asset' declared_type='AVAsset*'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithURL:'>
<arg index='0' type='@' name='url' declared_type='NSURL*'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='processMovieFrame:'>
<arg index='0' type='^{opaqueCMSampleBuffer=}' name='movieSampleBuffer' declared_type='CMSampleBufferRef'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='readNextAudioSampleFromOutput:'>
<arg index='0' type='@' name='readerAudioTrackOutput' declared_type='AVAssetReaderTrackOutput*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='readNextVideoFrameFromOutput:'>
<arg index='0' type='@' name='readerVideoTrackOutput' declared_type='AVAssetReaderTrackOutput*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='runBenchmark'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='setAsset:'>
<arg index='0' type='@' name='asset' declared_type='AVAsset*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setRunBenchmark:'>
<arg index='0' type='B' name='runBenchmark' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setUrl:'>
<arg index='0' type='@' name='url' declared_type='NSURL*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='startProcessing'>
<retval type='v' declared_type='void'/>
</method>
<method selector='url'>
<retval type='@' declared_type='NSURL*'/>
</method>
</class>
<class name='GPUImageMovieWriter'>
<method selector='audioInputReadyCallback'>
<retval type='@?' declared_type='void (^)(void)' function_pointer='true'>
<retval type='v' declared_type='void'/>
</retval>
</method>
<method selector='completionBlock'>
<retval type='@?' declared_type='void (^)(void)' function_pointer='true'>
<retval type='v' declared_type='void'/>
</retval>
</method>
<method selector='delegate'>
<retval type='@' declared_type='id'/>
</method>
<method selector='enableSynchronizationCallbacks'>
<retval type='v' declared_type='void'/>
</method>
<method selector='encodingLiveVideo'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='failureBlock'>
<retval type='@?' declared_type='void (^)(NSError *)' function_pointer='true'>
<arg type='@' declared_type='NSError*'/>
<retval type='v' declared_type='void'/>
</retval>
</method>
<method selector='finishRecording'>
<retval type='v' declared_type='void'/>
</method>
<method selector='hasAudioTrack'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='initWithMovieURL:size:'>
<arg index='0' type='@' name='newMovieURL' declared_type='NSURL*'/>
<arg index='1' type='{CGSize=ff}' name='newSize' declared_type='CGSize'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='processAudioBuffer:'>
<arg index='0' type='^{opaqueCMSampleBuffer=}' name='audioBuffer' declared_type='CMSampleBufferRef'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAudioInputReadyCallback:'>
<arg index='0' type='@?' name='audioInputReadyCallback' declared_type='void (^)(void)' function_pointer='true'>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setCompletionBlock:'>
<arg index='0' type='@?' name='completionBlock' declared_type='void (^)(void)' function_pointer='true'>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setDelegate:'>
<arg index='0' type='@' name='delegate' declared_type='id'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setEncodingLiveVideo:'>
<arg index='0' type='B' name='encodingLiveVideo' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFailureBlock:'>
<arg index='0' type='@?' name='failureBlock' declared_type='void (^)(NSError *)' function_pointer='true'>
<arg type='@' declared_type='NSError*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='setHasAudioTrack:'>
<arg index='0' type='B' name='hasAudioTrack' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setShouldPassthroughAudio:'>
<arg index='0' type='B' name='shouldPassthroughAudio' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setVideoInputReadyCallback:'>
<arg index='0' type='@?' name='videoInputReadyCallback' declared_type='void (^)(void)' function_pointer='true'>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='shouldPassthroughAudio'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='startRecording'>
<retval type='v' declared_type='void'/>
</method>
<method selector='videoInputReadyCallback'>
<retval type='@?' declared_type='void (^)(void)' function_pointer='true'>
<retval type='v' declared_type='void'/>
</retval>
</method>
</class>
<class name='GPUImageOpenGLESContext'>
<method selector='context'>
<retval type='^i' declared_type='int*'/>
</method>
<method class_method='true' selector='maximumTextureSizeForThisDevice'>
<retval type='i' declared_type='GLint'/>
</method>
<method class_method='true' selector='maximumTextureUnitsForThisDevice'>
<retval type='i' declared_type='GLint'/>
</method>
<method selector='presentBufferForDisplay'>
<retval type='v' declared_type='void'/>
</method>
<method class_method='true' selector='sharedImageProcessingOpenGLESContext'>
<retval type='@' declared_type='GPUImageOpenGLESContext*'/>
</method>
<method class_method='true' selector='supportsFastTextureUpload'>
<retval type='B' declared_type='BOOL'/>
</method>
<method class_method='true' selector='useImageProcessingContext'>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageOutput'>
<method selector='addTarget:'>
<arg index='0' type='@' name='newTarget' declared_type='id'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='addTarget:atTextureLocation:'>
<arg index='0' type='@' name='newTarget' declared_type='id'/>
<arg index='1' type='i' name='textureLocation' declared_type='NSInteger'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='audioEncodingTarget'>
<retval type='@' declared_type='GPUImageMovieWriter*'/>
</method>
<method selector='deleteOutputTexture'>
<retval type='v' declared_type='void'/>
</method>
<method selector='forceProcessingAtSize:'>
<arg index='0' type='{CGSize=ff}' name='frameSize' declared_type='CGSize'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='forceProcessingAtSizeRespectingAspectRatio:'>
<arg index='0' type='{CGSize=ff}' name='frameSize' declared_type='CGSize'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='imageByFilteringImage:'>
<arg index='0' type='@' name='imageToFilter' declared_type='id'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='imageFromCurrentlyProcessedOutput'>
<retval type='@' declared_type='id'/>
</method>
<method selector='imageFromCurrentlyProcessedOutputWithOrientation:'>
<arg index='0' type='@' name='imageOrientation' declared_type='id'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initializeOutputTexture'>
<retval type='v' declared_type='void'/>
</method>
<method selector='prepareForImageCapture'>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeAllTargets'>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeTarget:'>
<arg index='0' type='@' name='targetToRemove' declared_type='id'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setAudioEncodingTarget:'>
<arg index='0' type='@' name='audioEncodingTarget' declared_type='GPUImageMovieWriter*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setInputTextureForTarget:atIndex:'>
<arg index='0' type='@' name='target' declared_type='id'/>
<arg index='1' type='i' name='inputTextureIndex' declared_type='NSInteger'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setShouldIgnoreUpdatesToThisTarget:'>
<arg index='0' type='B' name='shouldIgnoreUpdatesToThisTarget' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setShouldSmoothlyScaleOutput:'>
<arg index='0' type='B' name='shouldSmoothlyScaleOutput' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTargetToIgnoreForUpdates:'>
<arg index='0' type='@' name='targetToIgnoreForUpdates' declared_type='id'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='shouldIgnoreUpdatesToThisTarget'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='shouldSmoothlyScaleOutput'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='targetToIgnoreForUpdates'>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='GPUImagePicture'>
<method selector='initWithImage:'>
<arg index='0' type='@' name='newImageSource' declared_type='id'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithImage:smoothlyScaleOutput:'>
<arg index='0' type='@' name='newImageSource' declared_type='id'/>
<arg index='1' type='B' name='smoothlyScaleOutput' declared_type='BOOL'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='processImage'>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImagePinchDistortionFilter'>
<method selector='center'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='radius'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='scale'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setCenter:'>
<arg index='0' type='{CGPoint=ff}' name='center' declared_type='CGPoint'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setRadius:'>
<arg index='0' type='f' name='radius' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setScale:'>
<arg index='0' type='f' name='scale' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImagePixellateFilter'>
<method selector='fractionalWidthOfAPixel'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setFractionalWidthOfAPixel:'>
<arg index='0' type='f' name='fractionalWidthOfAPixel' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImagePolarPixellateFilter'>
<method selector='center'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='pixelSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='setCenter:'>
<arg index='0' type='{CGPoint=ff}' name='center' declared_type='CGPoint'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setPixelSize:'>
<arg index='0' type='{CGSize=ff}' name='pixelSize' declared_type='CGSize'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImagePosterizeFilter'>
<method selector='colorLevels'>
<retval type='I' declared_type='NSUInteger'/>
</method>
<method selector='setColorLevels:'>
<arg index='0' type='I' name='colorLevels' declared_type='NSUInteger'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageRawData'>
<method selector='colorAtLocation:'>
<arg index='0' type='{CGPoint=ff}' name='locationInImage' declared_type='CGPoint'/>
<retval type='{GPUByteColorVector=CCCC}' declared_type='GPUByteColorVector'/>
</method>
<method selector='delegate'>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithImageSize:'>
<arg index='0' type='{CGSize=ff}' name='newImageSize' declared_type='CGSize'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='rawBytesForImage'>
<retval type='*' declared_type='GLubyte*'/>
</method>
<method selector='setDelegate:'>
<arg index='0' type='@' name='delegate' declared_type='id'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageRotationFilter'>
<method selector='initWithRotation:'>
<arg index='0' type='i' name='newRotationMode' declared_type='GPUImageRotationMode'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='GPUImageSaturationFilter'>
<method selector='saturation'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setSaturation:'>
<arg index='0' type='f' name='saturation' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageSharpenFilter'>
<method selector='setSharpness:'>
<arg index='0' type='f' name='sharpness' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sharpness'>
<retval type='f' declared_type='CGFloat'/>
</method>
</class>
<class name='GPUImageSmoothToonFilter'>
<method selector='blurSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='imageHeightFactor'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='imageWidthFactor'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='quantizationLevels'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setBlurSize:'>
<arg index='0' type='f' name='blurSize' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageHeightFactor:'>
<arg index='0' type='f' name='imageHeightFactor' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWidthFactor:'>
<arg index='0' type='f' name='imageWidthFactor' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setQuantizationLevels:'>
<arg index='0' type='f' name='quantizationLevels' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setThreshold:'>
<arg index='0' type='f' name='threshold' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='threshold'>
<retval type='f' declared_type='CGFloat'/>
</method>
</class>
<class name='GPUImageSobelEdgeDetectionFilter'>
<method selector='imageHeightFactor'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='imageWidthFactor'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setImageHeightFactor:'>
<arg index='0' type='f' name='imageHeightFactor' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWidthFactor:'>
<arg index='0' type='f' name='imageWidthFactor' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageStillCamera'>
<method selector='capturePhotoAsImageProcessedUpToFilter:withCompletionHandler:'>
<arg index='0' type='@' name='finalFilterInChain' declared_type='GPUImageOutput*'/>
<arg index='1' type='@?' name='block' declared_type='void (^)(int *, NSError *)' function_pointer='true'>
<arg type='^i' declared_type='int*'/>
<arg type='@' declared_type='NSError*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='capturePhotoAsJPEGProcessedUpToFilter:withCompletionHandler:'>
<arg index='0' type='@' name='finalFilterInChain' declared_type='GPUImageOutput*'/>
<arg index='1' type='@?' name='block' declared_type='void (^)(NSData *, NSError *)' function_pointer='true'>
<arg type='@' declared_type='NSData*'/>
<arg type='@' declared_type='NSError*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
<method selector='capturePhotoAsPNGProcessedUpToFilter:withCompletionHandler:'>
<arg index='0' type='@' name='finalFilterInChain' declared_type='GPUImageOutput*'/>
<arg index='1' type='@?' name='block' declared_type='void (^)(NSData *, NSError *)' function_pointer='true'>
<arg type='@' declared_type='NSData*'/>
<arg type='@' declared_type='NSError*'/>
<retval type='v' declared_type='void'/>
</arg>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageStretchDistortionFilter'>
<method selector='center'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='setCenter:'>
<arg index='0' type='{CGPoint=ff}' name='center' declared_type='CGPoint'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageSwirlFilter'>
<method selector='angle'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='center'>
<retval type='{CGPoint=ff}' declared_type='CGPoint'/>
</method>
<method selector='radius'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setAngle:'>
<arg index='0' type='f' name='angle' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setCenter:'>
<arg index='0' type='{CGPoint=ff}' name='center' declared_type='CGPoint'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setRadius:'>
<arg index='0' type='f' name='radius' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageTextureInput'>
<method selector='initWithTexture:size:'>
<arg index='0' type='I' name='newInputTexture' declared_type='GLuint'/>
<arg index='1' type='{CGSize=ff}' name='newTextureSize' declared_type='CGSize'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='processTexture'>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageTextureOutput'>
<method selector='delegate'>
<retval type='@' declared_type='id'/>
</method>
<method selector='setDelegate:'>
<arg index='0' type='@' name='delegate' declared_type='id'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='texture'>
<retval type='i' declared_type='GLint'/>
</method>
</class>
<class name='GPUImageThresholdEdgeDetection'>
<method selector='setThreshold:'>
<arg index='0' type='f' name='threshold' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='threshold'>
<retval type='f' declared_type='CGFloat'/>
</method>
</class>
<class name='GPUImageTiltShiftFilter'>
<method selector='blurSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='bottomFocusLevel'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='focusFallOffRate'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setBlurSize:'>
<arg index='0' type='f' name='blurSize' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setBottomFocusLevel:'>
<arg index='0' type='f' name='bottomFocusLevel' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFocusFallOffRate:'>
<arg index='0' type='f' name='focusFallOffRate' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTopFocusLevel:'>
<arg index='0' type='f' name='topFocusLevel' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='topFocusLevel'>
<retval type='f' declared_type='CGFloat'/>
</method>
</class>
<class name='GPUImageToonFilter'>
<method selector='imageHeightFactor'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='imageWidthFactor'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='quantizationLevels'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setImageHeightFactor:'>
<arg index='0' type='f' name='imageHeightFactor' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setImageWidthFactor:'>
<arg index='0' type='f' name='imageWidthFactor' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setQuantizationLevels:'>
<arg index='0' type='f' name='quantizationLevels' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setThreshold:'>
<arg index='0' type='f' name='threshold' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='threshold'>
<retval type='f' declared_type='CGFloat'/>
</method>
</class>
<class name='GPUImageTransformFilter'>
<method selector='affineTransform'>
<retval type='{CGAffineTransform=ffffff}' declared_type='CGAffineTransform'/>
</method>
<method selector='ignoreAspectRatio'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='setAffineTransform:'>
<arg index='0' type='{CGAffineTransform=ffffff}' name='affineTransform' declared_type='CGAffineTransform'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setIgnoreAspectRatio:'>
<arg index='0' type='B' name='ignoreAspectRatio' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setTransform3D:'>
<arg index='0' type='{CATransform3D=ffffffffffffffff}' name='transform3D' declared_type='CATransform3D'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='transform3D'>
<retval type='{CATransform3D=ffffffffffffffff}' declared_type='CATransform3D'/>
</method>
</class>
<class name='GPUImageTwoPassFilter'>
<method selector='initWithFirstStageFragmentShaderFromString:secondStageFragmentShaderFromString:'>
<arg index='0' type='@' name='firstStageFragmentShaderString' declared_type='NSString*'/>
<arg index='1' type='@' name='secondStageFragmentShaderString' declared_type='NSString*'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='initWithFirstStageVertexShaderFromString:firstStageFragmentShaderFromString:secondStageVertexShaderFromString:secondStageFragmentShaderFromString:'>
<arg index='0' type='@' name='firstStageVertexShaderString' declared_type='NSString*'/>
<arg index='1' type='@' name='firstStageFragmentShaderString' declared_type='NSString*'/>
<arg index='2' type='@' name='secondStageVertexShaderString' declared_type='NSString*'/>
<arg index='3' type='@' name='secondStageFragmentShaderString' declared_type='NSString*'/>
<retval type='@' declared_type='id'/>
</method>
</class>
<class name='GPUImageUnsharpMaskFilter'>
<method selector='blurSize'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='intensity'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='setBlurSize:'>
<arg index='0' type='f' name='blurSize' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setIntensity:'>
<arg index='0' type='f' name='intensity' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageVideoCamera'>
<method selector='averageFrameDurationDuringCapture'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='cameraPosition'>
<retval type='i' declared_type='AVCaptureDevicePosition'/>
</method>
<method selector='captureSession'>
<retval type='@' declared_type='AVCaptureSession*'/>
</method>
<method selector='initWithSessionPreset:cameraPosition:'>
<arg index='0' type='@' name='sessionPreset' declared_type='NSString*'/>
<arg index='1' type='i' name='cameraPosition' declared_type='AVCaptureDevicePosition'/>
<retval type='@' declared_type='id'/>
</method>
<method selector='inputCamera'>
<retval type='@' declared_type='AVCaptureDevice*'/>
</method>
<method selector='pauseCameraCapture'>
<retval type='v' declared_type='void'/>
</method>
<method selector='processAudioSampleBuffer:'>
<arg index='0' type='^{opaqueCMSampleBuffer=}' name='sampleBuffer' declared_type='CMSampleBufferRef'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='processVideoSampleBuffer:'>
<arg index='0' type='^{opaqueCMSampleBuffer=}' name='sampleBuffer' declared_type='CMSampleBufferRef'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='removeInputsAndOutputs'>
<retval type='v' declared_type='void'/>
</method>
<method selector='resumeCameraCapture'>
<retval type='v' declared_type='void'/>
</method>
<method selector='rotateCamera'>
<retval type='v' declared_type='void'/>
</method>
<method selector='runBenchmark'>
<retval type='B' declared_type='BOOL'/>
</method>
<method selector='setRunBenchmark:'>
<arg index='0' type='B' name='runBenchmark' declared_type='BOOL'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='startCameraCapture'>
<retval type='v' declared_type='void'/>
</method>
<method selector='stopCameraCapture'>
<retval type='v' declared_type='void'/>
</method>
</class>
<class name='GPUImageView'>
<method selector='fillMode'>
<retval type='i' declared_type='GPUImageFillModeType'/>
</method>
<method selector='setBackgroundColorRed:green:blue:alpha:'>
<arg index='0' type='f' name='redComponent' declared_type='GLfloat'/>
<arg index='1' type='f' name='greenComponent' declared_type='GLfloat'/>
<arg index='2' type='f' name='blueComponent' declared_type='GLfloat'/>
<arg index='3' type='f' name='alphaComponent' declared_type='GLfloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setFillMode:'>
<arg index='0' type='i' name='fillMode' declared_type='GPUImageFillModeType'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='sizeInPixels'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
</class>
<class name='GPUImageVignetteFilter'>
<method selector='setX:'>
<arg index='0' type='f' name='x' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setY:'>
<arg index='0' type='f' name='y' declared_type='CGFloat'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='x'>
<retval type='f' declared_type='CGFloat'/>
</method>
<method selector='y'>
<retval type='f' declared_type='CGFloat'/>
</method>
</class>
<class name='NSObject'>
<method selector='endProcessing'>
<retval type='v' declared_type='void'/>
</method>
<method selector='maximumOutputSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method selector='movieRecordingCompleted'>
<retval type='v' declared_type='void'/>
</method>
<method selector='movieRecordingFailedWithError:'>
<arg index='0' type='@' name='error' declared_type='NSError*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='newFrameReadyAtTime:'>
<arg index='0' type='{_CMTime=qiIq}' name='frameTime' declared_type='CMTime'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='newFrameReadyFromTextureOutput:'>
<arg index='0' type='@' name='callbackTextureOutput' declared_type='GPUImageTextureOutput*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='newImageFrameAvailableFromDataSource:'>
<arg index='0' type='@' name='rawDataSource' declared_type='GPUImageRawData*'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='nextAvailableTextureIndex'>
<retval type='i' declared_type='NSInteger'/>
</method>
<method selector='setInputSize:'>
<arg index='0' type='{CGSize=ff}' name='newSize' declared_type='CGSize'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='setInputTexture:atIndex:'>
<arg index='0' type='I' name='newInputTexture' declared_type='GLuint'/>
<arg index='1' type='i' name='textureIndex' declared_type='NSInteger'/>
<retval type='v' declared_type='void'/>
</method>
<method selector='shouldIgnoreUpdatesToThisTarget'>
<retval type='B' declared_type='BOOL'/>
</method>
</class>
<informal_protocol name='GPUImageInput'>
<method type='v8@0:4' selector='endProcessing'>
<retval type='v' declared_type='void'/>
</method>
<method type='{CGSize=ff}8@0:4' selector='maximumOutputSize'>
<retval type='{CGSize=ff}' declared_type='CGSize'/>
</method>
<method type='v32@0:4{?=qiIq}8' selector='newFrameReadyAtTime:'>
<arg index='0' type='{_CMTime=qiIq}' name='frameTime' declared_type='CMTime'/>
<retval type='v' declared_type='void'/>
</method>
<method type='i8@0:4' selector='nextAvailableTextureIndex'>
<retval type='i' declared_type='NSInteger'/>
</method>
<method type='v16@0:4{CGSize=ff}8' selector='setInputSize:'>
<arg index='0' type='{CGSize=ff}' name='newSize' declared_type='CGSize'/>
<retval type='v' declared_type='void'/>
</method>
<method type='v16@0:4I8i12' selector='setInputTexture:atIndex:'>
<arg index='0' type='I' name='newInputTexture' declared_type='GLuint'/>
<arg index='1' type='i' name='textureIndex' declared_type='NSInteger'/>
<retval type='v' declared_type='void'/>
</method>
<method type='B8@0:4' selector='shouldIgnoreUpdatesToThisTarget'>
<retval type='B' declared_type='BOOL'/>
</method>
</informal_protocol>
<informal_protocol name='GPUImageMovieWriterDelegate'>
<method type='v8@0:4' selector='movieRecordingCompleted'>
<retval type='v' declared_type='void'/>
</method>
<method type='v12@0:4@8' selector='movieRecordingFailedWithError:'>
<arg index='0' type='@' name='error' declared_type='NSError*'/>
<retval type='v' declared_type='void'/>
</method>
</informal_protocol>
<informal_protocol name='GPUImageRawDataProcessor'>
<method type='v12@0:4@8' selector='newImageFrameAvailableFromDataSource:'>
<arg index='0' type='@' name='rawDataSource' declared_type='GPUImageRawData*'/>
<retval type='v' declared_type='void'/>
</method>
</informal_protocol>
<informal_protocol name='GPUImageTextureOutputDelegate'>
<method type='v12@0:4@8' selector='newFrameReadyFromTextureOutput:'>
<arg index='0' type='@' name='callbackTextureOutput' declared_type='GPUImageTextureOutput*'/>
<retval type='v' declared_type='void'/>
</method>
</informal_protocol>
</signatures>
